#!/bin/bash

dir=`pwd`
app=`basename $dir`

if [ "$app" == "tools" ]; then
    cd ..
    dir=`pwd`
    app=`basename $dir`
fi

function showHelp
{
    printf "Usage: nyx gen dao <options>\n" 
    printf "Options:
    -f, 强制生成，如果已存在则覆盖
    -c, 配置文件名, 默认: db_master,db_slave 
    -t, 表名 
    -p, 主键名，默认: id
    -n, 哈希分表数值, 默认: 1\n"
}

while getopts "fhc:t:p:n:" arg #选项后面的冒号表示该选项需要参数
do
    case $arg in #参数值存在$OPTARG中
        f)  
        is_force=Y
        ;;  
        c)
        conf_name=$OPTARG
        ;;
        t)
        table_name=$OPTARG
        ;; 
        p)
        pk_name=$OPTARG
        ;;
        n)
        hash_num=$OPTARG
        ;;
        h)
        showHelp
        exit 1
        ;; 
        ?)  #当有不认识的选项的时候arg为?
        echo "unkonw argument"
        showHelp
        exit 1
        ;;  
    esac
done

if [  "" = "$table_name" ]; then
    showHelp
    exit 1
fi

if [ "" = "$pk_name" ]; then
    pk_name="id"
fi

function tocamel {
#{{{
    name=$1

    OLD_IFS="$IFS"
    IFS="_"
    arr=($name)
    IFS="$OLD_IFS"

    camel=""
    for s in ${arr[@]}
    do
        camel="$camel"$(ucfirst $s)
    done

    echo $camel
}
#}}}

function ucfirst {
#{{{
    name=`echo $1 | tr '[A-Z]' '[a-z]'`
    first_char=${name:0:1}
    other_chars=${name:1}
    echo `echo $first_char| tr '[a-z]' '[A-Z]'`$other_chars
}
#}}}

model_name=$(tocamel $table_name)
tbl_name=`echo $table_name | tr '[A-Z]' '[a-z]'`

ROOT_DIR=`pwd`

dao_file=$ROOT_DIR/dao/${model_name}Dao.go


function genDao {
#{{{
echo "package dao" >> $dao_file
echo "" >> $dao_file
echo "//此文件是由 tools/genDao 自动生成, 可按需要修改" >> $dao_file
echo "" >> $dao_file
echo "import (" >> $dao_file
echo "	\"github.com/nyxless/nyx/x\"" >> $dao_file
echo "	\"github.com/nyxless/nyx/dao\"" >> $dao_file
echo ")" >> $dao_file
echo "" >> $dao_file
if [ "" != "$hash_num" ] && [ $hash_num > 1 ];then
echo "func New${model_name}Dao(id int, tx ...*x.SqlClient) *${model_name}Dao {" >> $dao_file
else
echo "func New${model_name}Dao(tx ...*x.SqlClient) *${model_name}Dao {" >> $dao_file
fi

echo "	ins := &${model_name}Dao{}" >> $dao_file
if [ "" != "$hash_num" ] && [ $hash_num > 1 ];then
echo "	ins.Init(id, tx...)" >> $dao_file
else
echo "	ins.Init(tx...)" >> $dao_file
fi

echo "	return ins" >> $dao_file
echo "}" >> $dao_file
echo "" >> $dao_file
echo "type ${model_name}Dao struct {" >> $dao_file
echo "	dao.Dao" >> $dao_file
echo "}" >> $dao_file
echo "" >> $dao_file

if [ "" != "$hash_num" ] && [ $hash_num > 1 ];then
echo "func (this *${model_name}Dao) Init(id int, tx ...*x.SqlClient) {" >> $dao_file
else
echo "func (this *${model_name}Dao) Init(tx ...*x.SqlClient) {" >> $dao_file
fi

if [ "" != "$conf_name" ]; then
    conf_name=$(echo "$conf_name" | sed 's/ //' | sed 's/,/","/')
    conf_name="\"${conf_name}\""
fi

echo "	if len(tx) > 0 {" >> $dao_file
echo "		this.Dao.InitTx(tx[0])" >> $dao_file
echo "	} else {" >> $dao_file
echo "		this.Dao.Init(${conf_name})" >> $dao_file
echo "	}" >> $dao_file

if [ "" != "$hash_num" ] && [ $hash_num > 1 ];then
echo "	this.SetTable(\"${tbl_name}_\" + x.ToString(id%$hash_num))" >> $dao_file
else
echo "	this.SetTable(\"${tbl_name}\")" >> $dao_file
fi
echo "	this.SetPrimary(\"$pk_name\")" >> $dao_file
echo "}" >> $dao_file
}
#}}}

       
    if test -e $dao_file; then
        echo "file [$dao_file] exists!"

        if [ "$is_force" = "Y" ]; then
            mv $dao_file $dao_file.bak
            echo "backup file saved at [$dao_file.bak]"
            genDao
            echo "regenerated dao file $dao_file"
            echo "success!"

            echo "提醒:自动生成的文件中，包名默认为$app, 若不指定主键，默认主键为‘id’，请修改成您需要的值!!!"
        fi

    else
        mkdir -p "$ROOT_DIR/dao"
        genDao

        if test -e $dao_file; then
            echo "generated dao file $dao_file"
            echo "success!"

            echo "提醒:自动生成的文件中，包名默认为$app, 若不指定主键，默认主键为‘id’，请修改成您需要的值!!!"
        fi
    fi



