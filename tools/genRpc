#!/bin/bash
cd `dirname $0`

cd ..

dir=`pwd`
app=`basename $dir`

function showHelp
{
    printf "Usage: nyx gen rpc <options>\n" 
    printf "Options:
    -f, 强制生成，如果已存在则覆盖
    -m, 模块名 
    -r, rpc方法名，多个逗号分隔, 使用basename作为函数名
    -p, rpc方法名前缀，多个相同路径的方法，可统一指定前缀\n"
}

while getopts "fhm:r:p:" arg #选项后面的冒号表示该选项需要参数
do
    case $arg in #参数值存在$OPTARG中
        f)  
        is_force=Y
        ;;  
        m)
        service=$OPTARG
        ;;
        r)
        methods=$OPTARG
        ;;
        p)
        prefix=$OPTARG
        ;;  
        h)
        showHelp
        exit 1
        ;; 
        ?)  #当有不认识的选项的时候arg为?
        echo "unkonw argument"
        showHelp
        exit 1
        ;;  
    esac
done

if [  "" = "$service" ]; then
    showHelp
    exit 1
fi

if [ "" = "$methods" ]; then
    methods="test"
fi

function tolower {
#{{{
    echo $1 | tr '[A-Z]' '[a-z]'
}
#}}}


function ucfirst {
#{{{
    name=$1
    first_char=${name:0:1}
    other_chars=${name:1}
    echo `echo $first_char| tr '[a-z]' '[A-Z]'`$other_chars
}
#}}}

function trim {
#{{{
    local string="$1"
    local char="$2"

    echo "$string" | awk -v c="$char" '{gsub("^" c "+|" c "+$", ""); print}'
}
#}}}

service=$(tolower $service)
model_name=$(ucfirst $service)

ROOT_DIR=`pwd`

model_dir=$ROOT_DIR/models
model_file=$model_dir/$model_name.go

if [ -n "$prefix" ]; then
    prefix=$(trim $prefix "/")
fi

function genModel {
#{{{
    OLD_IFS="$IFS"
    IFS=","

    arr=($methods)
    IFS="$OLD_IFS"

echo "package models" >> $model_file
echo "" >> $model_file
echo "//此文件是由 tools/genRpcModel 自动生成, 可按需要修改" >> $model_file
echo "" >> $model_file
echo "import (" >> $model_file
echo "	\"fmt\"" >> $model_file
echo "	\"github.com/nyxless/nyxclient\"" >> $model_file
echo "	\"github.com/nyxless/nyx/model\"" >> $model_file
echo "	\"github.com/nyxless/nyx/x\"" >> $model_file
echo ")" >> $model_file
echo "" >> $model_file

echo "func ${model_name}() *${model_name}Model {" >> $model_file
echo "	return &${model_name}Model{}" >> $model_file
echo "}" >> $model_file
echo "" >> $model_file

echo "type ${model_name}Model struct {" >> $model_file
echo "	model.Model" >> $model_file
echo "}" >> $model_file
echo "" >> $model_file

echo "func (this *${model_name}Model) getClient() (*nyxclient.NyxClient, error) { // {{{" >> $model_file
echo "	conf := x.Conf.GetMap(\"rpc_client_${service}\") ">> $model_file
echo "	return nyxclient.NewNyxClient(conf[\"host\"], conf[\"appid\"], conf[\"secret\"])" >> $model_file
echo "} //}}}" >> $model_file

    for m in ${arr[@]}
    do
        m=$(trim $m "/")
        func_name=$(ucfirst `echo ${m}|awk -F'/' '{print $NF}'`)

echo "" >> $model_file
echo "func (this *${model_name}Model) ${func_name}() (x.MAP, error) { // {{{" >> $model_file
echo "   c, err := this.getClient()" >> $model_file
echo "   if nil != err {" >> $model_file
echo "      return nil, err" >> $model_file
echo "   }" >> $model_file
echo "" >> $model_file
if [ -n "$prefix" ]; then
    m="${prefix}/$m"
fi
echo "   res, err := c.Request(\"${m}\", x.MAP{}, nyxclient.WithContext(this.Ctx))" >> $model_file
echo "   if err != nil {" >> $model_file
echo "      return nil, err" >> $model_file
echo "   }" >> $model_file
echo "" >> $model_file
echo "   if res.GetCode() > 0 {" >> $model_file
echo "      return nil, fmt.Errorf(\"rpc client return err: %s\", res.GetMsg())" >> $model_file
echo "   }" >> $model_file
echo "" >> $model_file
echo "   return res.GetData(), nil" >> $model_file
echo "} // }}}" >> $model_file

    done
}
#}}}

success=N
if test -e $model_file ;then
    echo "file [$model_file] exists!"

    if [ "$is_force" = "Y" ]; then
        mv $model_file $model_file.bak
        echo "backup file saved at [$model_file.bak]"

        genModel

        success=Y
    fi
else
    mkdir -p $model_dir
    genModel

    if test -e $model_file; then
        success=Y
    fi
fi

if [ "$success" = "Y" ]; then
    echo "generated model file $model_file"
    echo "success!"

    echo "请根据需要补全参数及修改必要的逻辑!"
fi



